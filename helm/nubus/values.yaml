# SPDX-License-Identifier: AGPL-3.0-only
# SPDX-FileCopyrightText: 2024-2025 Univention GmbH
---
global:
  # -- Indicates to all subcharts that they are being used as part of a Nubus deployment.
  nubusDeployment: true
  secrets:
    # -- Master password from which other passwords are derived.
    masterPassword: ""
  ldap:
    baseDn: ""
    domainName: ""
    auth:
      cnAdmin:
        password: null
        existingSecret:
          name: null
          keyMapping:
            password: "adminPassword"

  udm:
    connection:
      # -- Global default for the URL via which the UDM Rest API can be reached.
      # In transition state, not all subcharts do make use of this yet.
      url: '{{ include "nubusTemplates.udmRestApi.uri" . }}'

  domain: ""
  subDomains:
    portal: portal
    keycloak: id
    scim: scim

  ingressClass: ""
  certManagerIssuer: ""
  postgresql:
    connection:
      host: ""
      port: ""
  memcached:
    connection:
      host: ""
    auth:
      username: ""
  keycloak:
    realm: "nubus"
  # -- Allow plain UMC login (otherwise only SAML login is possible)
  # Be aware this will expose the UMC login page to the public, which can
  # circumvent 2FA and other security measures placed in the IdP.
  enablePlainUmcLogin: false

  configMapUcr: "{{ .Release.Name }}-stack-data-ums-ucr"

  configUcr:
    umc:
      module:
        debug:
          level: 2 # default loglevel (subchart): 5
      server:
        debug:
          level: 2 # default loglevel (subchart): 5
    apache2:
      loglevel: "info" # default loglevel (subchart): warn
    ldap:
      # -- Indexes for the LDAP database
      index:
        eq: aRecord,automountInformation,cNAMERecord,cn,description,dhcpHWAddress,displayName,entryUUID,gidNumber,givenName,homeDirectory,krb5PrincipalName,macAddress,mail,mailAlternativeAddress,mailPrimaryAddress,memberUid,objectClass,ou,pTRRecord,relativeDomainName,sambaAcctFlags,sambaDomainName,sambaGroupType,sambaPrimaryGroupSID,sambaSID,sambaSIDList,secretary,shadowExpire,sn,uid,uidNumber,uniqueMember,univentionCanonicalRecipientRewriteEnabled,univentionDataType,univentionInventoryNumber,univentionLicenseModule,univentionLicenseObject,univentionMailHomeServer,univentionNagiosHostname,univentionObjectFlag,univentionObjectType,univentionPolicyReference,univentionServerRole,univentionService,univentionShareGid,univentionShareSambaName,univentionShareWriteable,univentionUDMOptionModule,univentionUDMPropertyCLIName,univentionUDMPropertyCopyable,univentionUDMPropertyDefault,univentionUDMPropertyDeleteObjectClass,univentionUDMPropertyDoNotSearch,univentionUDMPropertyHook,univentionUDMPropertyLayoutOverwritePosition,univentionUDMPropertyLayoutOverwriteTab,univentionUDMPropertyLayoutPosition,univentionUDMPropertyLayoutTabAdvanced,univentionUDMPropertyLayoutTabName,univentionUDMPropertyLdapMapping,univentionUDMPropertyLongDescription,univentionUDMPropertyModule,univentionUDMPropertyMultivalue,univentionUDMPropertyObjectClass,univentionUDMPropertyOptions,univentionUDMPropertyShortDescription,univentionUDMPropertySyntax,univentionUDMPropertyTranslationLongDescription,univentionUDMPropertyTranslationShortDescription,univentionUDMPropertyTranslationTabName,univentionUDMPropertyValueMayChange,univentionUDMPropertyValueRequired,univentionUDMPropertyVersion,zoneName,univentionObjectIdentifier
        pres: aRecord,automountInformation,cn,description,dhcpHWAddress,displayName,gidNumber,givenName,homeDirectory,krb5PrincipalName,macAddress,mail,mailAlternativeAddress,mailPrimaryAddress,memberUid,name,objectClass,ou,relativeDomainName,shadowMax,sn,uid,uidNumber,uniqueMember,univentionMailHomeServer,univentionObjectFlag,univentionPolicyReference,univentionUDMPropertyCLIName,univentionUDMPropertyDefault,univentionUDMPropertyDeleteObjectClass,univentionUDMPropertyDoNotSearch,univentionUDMPropertyHook,univentionUDMPropertyLayoutOverwritePosition,univentionUDMPropertyLayoutOverwriteTab,univentionUDMPropertyLayoutPosition,univentionUDMPropertyLayoutTabAdvanced,univentionUDMPropertyLayoutTabName,univentionUDMPropertyLdapMapping,univentionUDMPropertyLongDescription,univentionUDMPropertyModule,univentionUDMPropertyMultivalue,univentionUDMPropertyObjectClass,univentionUDMPropertyOptions,univentionUDMPropertyShortDescription,univentionUDMPropertySyntax,univentionUDMPropertyTranslationLongDescription,univentionUDMPropertyTranslationShortDescription,univentionUDMPropertyTranslationTabName,univentionUDMPropertyValueMayChange,univentionUDMPropertyValueRequired,univentionUDMPropertyVersion,zoneName,univentionObjectIdentifier
        approx: cn,givenName,mail,sn,uid
        sub: aRecord,associatedDomain,automountInformation,cn,default,description,displayName,employeeNumber,givenName,macAddress,mail,mailAlternativeAddress,mailPrimaryAddress,name,ou,pTRRecord,printerModel,relativeDomainName,sambaSID,sn,uid,univentionInventoryNumber,univentionOperatingSystem,univentionSyntaxDescription,univentionUDMPropertyLongDescription,univentionUDMPropertyShortDescription,zoneName
  # -- Extensions to load. Add entries to load additional extensions into Nubus.
  extensions: []

  # -- Allows to configure the system extensions to load. This is intended for
  # internal usage, prefer to use `global.extensions` for user configured
  # extensions.
  systemExtensions:
    - name: "portal"
      image:
        registry: "artifacts.software-univention.de"
        repository: "nubus/images/portal-extension"
        imagePullPolicy: "IfNotPresent"
        tag: "0.59.1@sha256:c9c7faa3cca2be2f45d073517a50e8a8cc89d46c978c2f3a6be3c13d0e6ae900"
    - name: "2fa-helpdesk"
      image:
        registry: "artifacts.software-univention.de"
        repository: "nubus/images/twofa-helpdesk-extensions"
        imagePullPolicy: "IfNotPresent"
        tag: "0.5.1@sha256:21217d02d45881f46e52ab54698f967f9cc5ead6a5a04270b0deb8e63b7eb715"

# -- Additional custom annotations to add to all objects deployed directly by the umbrella chart.
additionalAnnotations: {}

# -- Additional custom labels to add to all objects deployed directly by the umbrella chart.
additionalLabels: {}

# -- SAML certificates generation
certificates:
  # -- Enable SAML self-signed certificate generation. This required cert-manager.io
  enabled: true

# -- Configure supporting Ingress resources created directly by the umbrella chart.
#
# The "enabled" attribute has been split, so that it is easier to enabled or
# disable individual resources. They are organized according to the pattern
# "{purpose}.enabled".
#
# Ref.: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  # -- Serve an icon on the path "/favicon.ico" if enabled.
  favicon:
    enabled: true

  # -- Serve dynamic portal assets (icons, logos, background images) out of the
  # MinIO bucket "portal-assets".
  #
  # This is intended to be used together with the bundled minio. If an external
  # S3-compatible store is used then a potentially needed Ingress resource as to
  # be set up by the operator.
  minio:
    enabled: true

  # -- Define the Fully Qualified Domain Name (FQDN) where application should be reachable.
  host: ""

  # -- Request certificates via cert-manager.io annotation
  certManager:
    # -- Enable cert-manager.io annotaion.
    enabled: true

    # Issuer reference.
    issuerRef:
      # -- Name of cert-manager.io Issuer resource.
      name: ""
      # -- Type of Issuer, f.e. "Issuer" or "ClusterIssuer".
      kind: "ClusterIssuer"

  # -- The Ingress controller class name.
  ingressClassName: ""
  # -- Define custom ingress annotations.
  # annotations:
  #   nginx.ingress.kubernetes.io/rewrite-target: /
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: "128k"
    nginx.ingress.kubernetes.io/proxy-buffer-size: "64k"
    nginx.ingress.kubernetes.io/proxy-buffers-number: "4"
    nginx.ingress.kubernetes.io/proxy-busy-buffers-size: "128k"
    nginx.ingress.kubernetes.io/proxy-http-version: "1.1"
    nginx.ingress.kubernetes.io/proxy-set-headers: |
      Host $http_host;
      X-Forwarded-For $proxy_add_x_forwarded_for;
      X-Forwarded-Host $http_x_forwarded_host;
      X-Forwarded-Port $http_x_forwarded_port;
      X-Forwarded-Proto $http_x_forwarded_proto;
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/affinity: "none"

  # -- Secure an Ingress by specifying a Secret that contains a TLS private key and certificate.
  #
  # Ref.: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
  tls:
    # -- Enable TLS/SSL/HTTPS for Ingress.
    enabled: true

    # -- The name of the kubernetes secret which contains a TLS private key and certificate.
    # Hint: This secret is not created by this chart and must be provided.
    secretName: ""

nubusDevelopment:
  resources: &nubusDevelopmentResources
    limits:
      cpu: 288
      memory: "1Gi"
    requests:
      cpu: "10m"
      memory: "16Mi"
  terminationGracePeriodSeconds: &nubusTerminationGracePeriodSeconds 5

postgresql:
  enabled: true
  resources: *nubusDevelopmentResources
  auth:
    existingSecret: "{{ .Release.Name }}-postgresql-credentials"
    username: "nubus"
    secretKeys:
      adminPasswordKey: "admin_password"
      userPasswordKey: "user_password"
      replicationPasswordKey: "replication_password"
  tls:
    enabled: false
    existingSecret: "{{ .Release.Name }}-postgresql-tls"
    certFilename: "tls.crt"
    certKeyFilename: "tls.key"
    certCaFilename: "ca.crt"
  provisioning:
    enabled: true
    ttlSecondsAfterFinished: 30
    image:
      registry: "docker.io"
      repository: "bitnami/postgresql"
      tag: "15.4.0-debian-11-r45"
    containerSecurityContext:
      enabled: true
      seLinuxOptions: {}
      runAsUser: 1001
      runAsGroup: 1001
      runAsNonRoot: true
      privileged: false
      readOnlyRootFilesystem: true
      allowPrivilegeEscalation: false
      capabilities:
        drop: ["ALL"]
      seccompProfile:
        type: "RuntimeDefault"
  primary:
    resources: *nubusDevelopmentResources
    terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds

minio:
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  enabled: true
  resources: *nubusDevelopmentResources
  networkPolicy:
    enabled: false
    resources: *nubusDevelopmentResources
  auth:
    rootUser: admin
    existingSecret: "{{ .Release.Name }}-minio-credentials"
  tls:
    enabled: false
    resources: *nubusDevelopmentResources
    existingSecret: "{{ .Release.Name }}-minio-tls"

  provisioning:
    enabled: true
    resources: *nubusDevelopmentResources
    cleanupAfterFinished:
      enabled: true
      seconds: 900
      resources: *nubusDevelopmentResources
    extraCommands:
      - "mc anonymous set download provisioning/nubus/portal-assets"
    buckets:
      - name: "nubus"
        versioning: false
        withLock: false
    policies:
      - name: "nubus-readwrite"
        statements:
          - resources:
              - "arn:aws:s3:::nubus"
              - "arn:aws:s3:::nubus/*"
            effect: "Allow"
            actions:
              - "s3:*"
      - name: "nubus-read"
        statements:
          - resources:
              - "arn:aws:s3:::nubus"
              - "arn:aws:s3:::nubus/*"
            effect: "Allow"
            actions:
              - "s3:GetBucketLocation"
              - "s3:GetObject"
    usersExistingSecrets:
      - nubus-minio-provisioning

keycloak:
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  enabled: true
  resources: *nubusDevelopmentResources
  replicaCount: 1
  postgresql:
    connection:
      host: ""
      port: ""
    auth:
      username: keycloak_user
      database: keycloak
      existingSecret:
        name: '{{- printf "%s-keycloak-postgresql-credentials" .Release.Name -}}'
  keycloak:
    auth:
      username: "kcadmin"
      existingSecret:
        name: '{{- printf "%s-keycloak-credentials" .Release.Name -}}'
        keyMapping:
          adminPassword: "admin_password"
  config:
    logLevel: "INFO" # default loglevel (subchart): INFO
  ingress:
    enabled: true

nubusGuardian: &nubusGuardian
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  nameOverride: "guardian"
  enabled: true
  ingress:
    host: "{{ .Values.global.subDomains.portal }}.{{ .Values.global.domain }}"
  resources: *nubusDevelopmentResources
  authorizationApi:
    udm:
      auth:
        username: 'cn=admin'
        existingSecret:
          name: '{{- printf "%s-guardian-udm-secret" .Release.Name -}}'
          keyMapping:
            password: 'udmDataAdapterPassword'
  managementApi:
    oauth:
      auth:
        existingSecret:
          name: '{{- printf "%s-guardian-keycloak-client-secret" .Release.Name -}}'
          keyMapping:
            clientSecret: 'oauthAdapterM2mSecret'
  postgresql:
    connection:
      host: ""
      port: ""
    auth:
      database: guardian
      username: guardian
      existingSecret:
        name: '{{- printf "%s-guardian-management-api-postgresql-credentials" .Release.Name -}}'
  provisioning:
    enabled: true
    keycloak:
      auth:
        username: "kcadmin"
        existingSecret:
          name: '{{- printf "%s-guardian-provisioning-secret" .Release.Name -}}'
          keyMapping:
            password: "adminPassword"

nubusTwofaHelpdesk: &nubusTwofaHelpdesk
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  nameOverride: "helpdesk"
  enabled: false
  resources: *nubusDevelopmentResources
  ingress:
    host: "{{ .Values.global.subDomains.portal }}.{{ .Values.global.domain }}"
    certManager:
      enabled: true
    tls:
      secretName: "{{ .Release.Name }}-twofa-backend-api-tls"

  nubusBaseUrl: '{{ printf "%s.%s" .Values.global.subDomains.portal .Values.global.domain }}'
  provisioning:
    enabled: true

  keycloak:
    realm: "{{ .Values.global.keycloak.realm }}"
    admin_realm: "master"
    auth:
      username: "kcadmin"
      existingSecret:
        name: '{{- printf "%s-keycloak-credentials" .Release.Name -}}'
        keyMapping:
          adminPassword: "admin_password"
    connection:
      url: "https://{{ .Values.global.subDomains.keycloak }}.{{ .Values.global.domain }}"
      host: "{{ .Release.Name }}-keycloak"

nubusLdapNotifier: &nubusLdapNotifier
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  nameOverride: "ldap-notifier"
  enabled: true
  resources: *nubusDevelopmentResources

nubusLdapServer: &nubusLdapServer
  nameOverride: "ldap-server"
  enabled: true
  replicaCountPrimary: 1
  replicaCountSecondary: 1
  replicaCountProxy: 1
  resourcesPrimary: *nubusDevelopmentResources
  resourcesSecondary: *nubusDevelopmentResources
  resourcesProxy: *nubusDevelopmentResources
  ldapServer:
    auth:
      existingSecret:
        name: "{{ .Release.Name }}-ldap-server-credentials"
        keyMapping:
          password: "adminPassword"

nubusLicenseImport:
  enabled: false
  nameOverride: "license-import"
  ldap:
    connection:
      host: "{{ .Release.Name }}-ldap-server"
    auth:
      existingSecret:
        name: "{{ .Release.Name }}-ldap-server-credentials"
        keyMapping:
          password: "{{ .Values.global.ldap.auth.cnAdmin.existingSecret.keyMapping.password }}"

nubusNotificationsApi: &nubusNotificationsApi
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  nameOverride: "notifications-api"
  enabled: true
  resources: *nubusDevelopmentResources
  ingress:
    host: "{{ .Values.global.subDomains.portal }}.{{ .Values.global.domain }}"
  postgresql:
    bundled: false
    connection:
      host: ""
      port: ""
    auth:
      username: notificationsapi_user
      database: notificationsapi
      existingSecret:
        name: "{{ .Release.Name }}-notifications-api-postgresql-credentials"

nubusPortalFrontend: &nubusPortalFrontend
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  nameOverride: "portal-frontend"
  enabled: true
  resources: *nubusDevelopmentResources
  ingress:
    host: "{{ .Values.global.subDomains.portal }}.{{ .Values.global.domain }}"

nubusPortalConsumer: &nubusPortalConsumer
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  nameOverride: "portal-consumer"
  enabled: true
  resources: *nubusDevelopmentResources
  objectStorage:
    auth:
      existingSecret:
        name: "{{ .Release.Name }}-portal-consumer-minio-credentials"
    endpoint: "http://{{ .Release.Name }}-minio:9000"
    bucketName: "nubus"

  # TODO: Not yet supported
  # udm:
  #   auth:
  #     password: null
  portalConsumer:
    ldapHost: "{{ .Release.Name }}-ldap-server-primary"

  ldap:
    # -- Optional reference to a different secret containing credentials
    auth:
      existingSecret:
        name: "{{ .Release.Name }}-ldap-server-credentials"
        keyMapping:
          password: "adminPassword"

    # TLS configuration for the OpenLDAP server
    tls:
      enabled: false
      # -- Optional reference to the secret to use for reading certificates
      existingSecret:
        name: null
        keyMapping:
          ca.crt: null
          tls.crt: null
          tls.key: null

  provisioningApi:
    connection:
      baseUrl: '{{ printf "http://%s-provisioning-api" .Release.Name }}'
    # -- Authentication parameters
    auth:
      # -- The username to authenticate with. A secret will be created if existingSecret is not set.
      username: "portal-consumer"
      # -- The password to authenticate with. A secret will be created if existingSecret is not set.
      password: ""
      existingSecret:
        name: "{{ .Release.Name }}-portal-consumer-credentials"
        keyMapping:
          password: PROVISIONING_API_PASSWORD

nubusPortalServer: &nubusPortalServer
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  nameOverride: "portal-server"
  enabled: true
  ingress:
    host: "{{ .Values.global.subDomains.portal }}.{{ .Values.global.domain }}"

  objectStorage:
    auth:
      existingSecret:
        name: "{{ .Release.Name }}-portal-server-minio-credentials"
    endpoint: "http://{{ .Release.Name }}-minio:9000"
    bucketName: "nubus"

  portalServer:
    centralNavigation:
      existingSecret:
        name: "{{ .Release.Name }}-portal-server-central-navigation-shared-secret"

  udm:
    auth:
      existingSecret:
        name: "{{ .Release.Name }}-stack-data-ums-svc-portal-server"

  resources: *nubusDevelopmentResources

nubusProvisioning: &nubusProvisioning
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  nameOverride: "provisioning"

  enabled: true
  resources:
    dispatcher: *nubusDevelopmentResources
    prefill: *nubusDevelopmentResources
    api: *nubusDevelopmentResources
  ldap:
    auth:
      existingSecret:
        name: '{{- printf "%s-ldap-server-credentials" .Release.Name -}}'
        keyMapping:
          password: "{{ .Values.global.ldap.auth.cnAdmin.existingSecret.keyMapping.password }}"
  nats:
    auth:
      adminPassword: null
    config:
      cluster:
        # TODO: Set back to the default of 3 after nats clustering is solved.
        replicas: 1
      createUsers:
        udmListener:
          user: "udmlistener"
          password: "$NATS_UDM_LISTENER_PASSWORD"
          permissions:
            publish: ">"
            subscribe: ">"
    extraEnvVars:
      - name: NATS_UDM_LISTENER_PASSWORD
        valueFrom:
          secretKeyRef:
            name: "{{ .Release.Name }}-provisioning-udm-listener-credentials"
            key: NATS_PASSWORD
      - name: NATS_PASSWORD
        valueFrom:
          secretKeyRef:
            name: "{{ .Release.Name }}-provisioning-nats-credentials"
            key: admin_password
      - name: NATS_PROVISIONING_API_PASSWORD
        valueFrom:
          secretKeyRef:
            name: "{{ .Release.Name }}-provisioning-api-credentials"
            key: NATS_PASSWORD
      - name: NATS_DISPATCHER_PASSWORD
        valueFrom:
          secretKeyRef:
            name: "{{ .Release.Name }}-provisioning-dispatcher-credentials"
            key: NATS_PASSWORD
      - name: NATS_UDM_TRANSFORMER_PASSWORD
        valueFrom:
          secretKeyRef:
            name: "{{ .Release.Name }}-provisioning-udm-transformer-credentials"
            key: NATS_PASSWORD
      - name: NATS_PREFILL_PASSWORD
        valueFrom:
          secretKeyRef:
            name: "{{ .Release.Name }}-provisioning-prefill-credentials"
            key: NATS_PASSWORD
    global:
      imageRegistry: "docker.io"
    resources: *nubusDevelopmentResources
    reloader:
      resources: *nubusDevelopmentResources
    natsBox:
      resources: *nubusDevelopmentResources
  registerConsumers:
    createUsers:
      portalConsumer:
        # TODO: not yet supported
        # username: null
        # password: null
        existingSecret:
          name: '{{- printf "%s-provisioning-register-consumers-json-secrets" .Release.Name -}}'
          keyMapping:
            password: "portal-consumer.json"
      selfserviceConsumer:
        # TODO: not yet supported
        # username: null
        # password: null
        existingSecret:
          name: '{{- printf "%s-provisioning-register-consumers-json-secrets" .Release.Name -}}'
          keyMapping:
            password: "selfservice.json"

  api:
    auth:
      adminPassword: null
      prefillPassword: null
      udmTransformerPassword: null
      admin:
        existingSecret:
          name: "{{ .Release.Name }}-provisioning-api-credentials"
          keyMapping:
            password: ADMIN_PASSWORD
      eventsUdm:
        existingSecret:
          name: "{{ .Release.Name }}-provisioning-api-credentials"
          keyMapping:
            password: EVENTS_PASSWORD_UDM
      prefill:
        existingSecret:
          name: "{{ .Release.Name }}-provisioning-api-credentials"
          keyMapping:
            password: PREFILL_PASSWORD
    nats:
      auth:
        password: null
        existingSecret:
          name: "{{ .Release.Name }}-provisioning-api-credentials"
          keyMapping:
            provisioningApiPassword: "NATS_PASSWORD"
      connection:
        host: ""
        port: ""
        username: events_and_consumer_api
        password:
          secretKeyRef:
            key: password
    config:
      LOG_LEVEL: "INFO" # default loglevel (subchart): INFO
  dispatcher:
    nats:
      auth:
        password: null
        existingSecret:
          name: "{{ .Release.Name }}-provisioning-dispatcher-credentials"
          keyMapping:
            dispatcherPassword: "NATS_PASSWORD"

      connection:
        host: ""
        port: ""
    config:
      LOG_LEVEL: "INFO" # default loglevel (subchart): INFO
  prefill:
    nats:
      connection:
        host: ""
        port: ""
      auth:
        password: null
        existingSecret:
          name: "{{ .Release.Name }}-provisioning-prefill-credentials"
          keyMapping:
            prefillPassword: "NATS_PASSWORD"
    config:
      LOG_LEVEL: "INFO" # default loglevel (subchart): INFO
  udmTransformer:
    ldap:
      connection:
        host: "{{ .Release.Name }}-ldap-server-primary"
    nats:
      auth:
        password: null
        existingSecret:
          name: "{{ .Release.Name }}-provisioning-udm-transformer-credentials"
          keyMapping:
            udmTransformerPassword: "NATS_PASSWORD"
    config:
      LOG_LEVEL: "INFO" # default loglevel (subchart): INFO

nubusUdmListener: &nubusUdmListener
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  nameOverride: "provisioning-udm-listener"
  enabled: true
  resources: *nubusDevelopmentResources
  ldap:
    connection:
      host: ""
      port: ""
    auth:
      existingSecret:
        name: "{{ .Release.Name }}-provisioning-udm-listener-ldap-credentials"
        keyMapping:
          password: "ldap.secret"
  nats:
    connection:
      host: "{{ .Release.Name }}-provisioning-nats"
    auth:
      password: null
      existingSecret:
        name: "{{ .Release.Name }}-provisioning-udm-listener-credentials"
        keyMapping:
          password: "NATS_PASSWORD"
  provisioningApi:
    auth:
      existingSecret:
        name: "{{ .Release.Name }}-provisioning-udm-listener-credentials"
        keyMapping:
          password: "EVENTS_PASSWORD_UDM"
  config:
    debugLevel: "2" # default loglevel (subchart): 2

nubusSelfServiceConsumer: &nubusSelfServiceConsumer
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  nameOverride: "selfservice-listener"
  enabled: true
  resources: *nubusDevelopmentResources
  nats:
    auth:
      password: null
  provisioningApi:
    auth:
      username: "selfservice"
      # TODO: This needs another iteration, it shows that we set the password,
      # but we also have the existingSecret. Most likely this does belong in the
      # user provisioning configuration around provisioning.
      password: null
      existingSecret:
        name: "{{ .Release.Name }}-selfservice-listener-credentials"
        keyMapping:
          password: "PROVISIONING_API_PASSWORD"

nubusUdmRestApi: &nubusUdmRestApi
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  nameOverride: "udm-rest-api"
  enabled: true
  ingress:
    enabled: false
    host: "{{ .Values.global.subDomains.portal }}.{{ .Values.global.domain }}"
  resources: *nubusDevelopmentResources
  udmRestApi:
    ldap:
      uri: ""
      baseDn: ""
      auth:
        existingSecret:
          name: '{{- printf "%s-ldap-server-credentials" .Release.Name -}}'
          keyMapping:
            password: "{{ .Values.global.ldap.auth.cnAdmin.existingSecret.keyMapping.password }}"

nubusUmcGateway: &nubusUmcGateway
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  nameOverride: "umc-gateway"
  enabled: true
  ingress:
    host: "{{ .Values.global.subDomains.portal }}.{{ .Values.global.domain }}"
  resources: *nubusDevelopmentResources

nubusUmcServer: &nubusUmcServer
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  nameOverride: "umc-server"
  replicaCount: 1
  enabled: true
  ingress:
    host: "{{ .Values.global.subDomains.portal }}.{{ .Values.global.domain }}"
  resources: *nubusDevelopmentResources
  postgresql:
    auth:
      username: selfservice
      database: selfservice
      existingSecret:
        name: '{{ printf "%s-umc-server-postgresql-credentials" .Release.Name }}'
  global:
    imageRegistry: "docker.io"
  image:
    registry: "artifacts.software-univention.de"
  ldap:
    existingSecret:
      name: '{{ printf "%s-umc-server-ldap-credentials" .Release.Name }}'
      keyMapping:
        ldapPasswordKey: "ldap.secret"
        machinePasswordKey: "machine.secret"
  smtp:
    existingSecret:
      name: '{{ printf "%s-umc-server-smtp-credentials" .Release.Name }}'
  memcached:
    nameOverride: "umc-server-memcached"
    containerSecurityContext:
      readOnlyRootFilesystem: false
    auth:
      username: selfservice
      existingPasswordSecret: '{{ printf "%s-umc-server-memcached-credentials" .Release.Name }}'
      existingSecret:
        name: '{{ printf "%s-umc-server-memcached-credentials" .Release.Name }}'
    connection:
      username: umcserver
  umcServer:
    certPemFile: "/var/secrets/ssl/tls.crt"
    privateKeyFile: "/var/secrets/ssl/tls.key"
  proxy:
    logLevel: "INFO" # default loglevel (subchart): INFO
  extraVolumes:
    - name: "certificates"
      secret:
        secretName: "{{ .Release.Name }}-saml-tls"
  extraVolumeMounts:
    - name: "certificates"
      mountPath: "/var/secrets/ssl"

nubusKeycloakBootstrap: &nubusKeycloakBootstrap
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  nameOverride: "keycloak-bootstrap"
  enabled: true
  resources: *nubusDevelopmentResources
  bootstrap:
    twoFactorAuthentication:
      enabled: true
      group: "2fa-users"
  ldap:
    auth:
      bindDn: '{{ include "nubus.keycloak.ldap.auth.bindDn" . }}'
      existingSecret:
        name: '{{- printf "%s-keycloak-bootstrap-ldap-credentials" .Release.Name -}}'
  keycloak:
    auth:
      username: "kcadmin"
      existingSecret:
        name: '{{- printf "%s-keycloak-credentials" .Release.Name -}}'
        keyMapping:
          adminPassword: "admin_password"

nubusKeycloakExtensions: &nubusKeycloakExtensions
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  nameOverride: "keycloak-extensions"
  enabled: false
  resources: *nubusDevelopmentResources
  smtp:
    connection:
      host: ""
    auth:
      username: "keycloak-extensions"
      existingSecret:
        name: '{{- printf "%s-keycloak-extensions-smtp-credentials" .Release.Name -}}'
  keycloak:
    connection:
      host: ""
    auth:
      username: "kcadmin"
      existingSecret:
        name: '{{- printf "%s-keycloak-credentials" .Release.Name -}}'
        keyMapping:
          adminPassword: "admin_password"
  postgresql:
    connection:
      host: ""
      port: ""
    auth:
      database: keycloak_extensions
      username: keycloak_extensions
      existingSecret:
        name: '{{- printf "%s-keycloak-extensions-postgresql-credentials" .Release.Name -}}'
  handler:
    appConfig:
      logLevel: "INFO" # default loglevel (subchart): DEBUG
      newDeviceLoginNotificationEnable: "True"
      emailNotificationTimezone: "UTC"

  proxy:
    appConfig:
      logLevel: "info" # default loglevel (subchart): debug

nubusStackDataUms:
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  nameOverride: "stack-data-ums"
  enabled: true
  resources: *nubusDevelopmentResources
  udm:
    auth:
      existingSecret:
        name: '{{ printf "%s-udm-rest-api-credentials" .Release.Name }}'
        keyMapping:
          password: "ldap.secret"
  nubusUmcServer:
    host: '{{ printf "%s-umc-server" .Release.Name }}'
    postgresql:
      connection:
        host: '{{ include "nubusTemplates.connections.postgres.host" . }}'
        port: '{{ include "nubusTemplates.connections.postgres.port" . }}'
      auth:
        username: selfservice
        database: selfservice
    memcached:
      auth:
        username: selfservice
      connection:
        host: '{{ printf "%s-umc-server-memcached" .Release.Name }}'
  stackDataContext:
    ldapMasterHost: '{{ include "nubusTemplates.connections.ldap.primary.host" . }}'
    ldapHost: '{{ include "nubusTemplates.connections.ldap.primary.host" . }}'

  templateContext:
    initialPasswordAdministrator: '{{ include "nubusTemplates.credentials.administrator.password" . }}'
    ldapSearchUsers: []
    ldapSystemUsers:
      - username: "readonly"
        lastname: "LDAP-system-User"
        password: '{{ include "nubusTemplates.credentials.ldap.users.readonly.password" . }}'
    readonlyUserPassword: '{{ include "nubusTemplates.credentials.ldap.users.readonly.password" . }}'
    svcPortalServerUserPassword: null
    portalTwoFaLinkBase: 'https://{{ .Values.global.subDomains.portal }}.{{ .Values.global.domain }}'
    twofaSelfserviceTileCategory: "domain-service"
    twofaAdminTileCategory: "domain-admin"
    portalTwoFaAllowedGroups:
      - "Domain Admins"
    twofaActivated: false

nubusScimServer: &nubusScimServer
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  nameOverride: "scim-server"
  enabled: false
  resources: *nubusDevelopmentResources
  config:
    host: "https://{{ .Values.global.subDomains.scim }}.{{ .Values.global.domain }}"
    # -- Available log levels are:
    # TRACE, DEBUG, INFO, SUCCESS, WARNING, ERROR, CRITICAL
    #
    # For detailed information please have a look at the loguru documentation: https://loguru.readthedocs.io/en/stable/api/logger.html#levels
    logLevel: "INFO"
    corsOrigins: '["https://{{ .Values.global.subDomains.scim }}.{{ .Values.global.domain }}"]'
    auth:
      enabled: true
      allowedAudience: 'scim-api-access'
      allowedClientId: 'scim-client'
    externalId:
      userMapping: null
      groupMapping: null
    roles:
      userMapping: null
  keycloak:
    connection:
      url: "https://{{ .Values.global.subDomains.keycloak }}.{{ .Values.global.domain }}"
      realm: "{{ .Values.global.keycloak.realm }}"
  docu:
    enabled: false
  udm:
    connection:
      url: '{{ include "nubusTemplates.udmRestApi.uri" . }}'
    auth:
      username: "cn=admin"
      existingSecret:
        name: '{{- printf "%s-scim-server-udm-secret" .Release.Name -}}'
        keyMapping:
          username: "username"
          password: "password"
  ingress:
    enabled: true
    host: "{{ .Values.global.subDomains.scim }}.{{ .Values.global.domain }}"
    certManager:
      enabled: true
      issuerRef:
        name: ""
        kind: "ClusterIssuer"
    tls:
      enabled: true

# Allows for creation of additional secrets, for example containing credentials for third party services.
extraSecrets: []
