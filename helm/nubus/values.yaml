# SPDX-License-Identifier: AGPL-3.0-only
# SPDX-FileCopyrightText: 2024 Univention GmbH
---
global:
  # -- Indicates to all subcharts that they are being used as part of a Nubus deployment.
  nubusDeployment: true
  # -- Master password from which other passwords are derived.
  nubusMasterPassword: ""
  ldap:
    baseDn: ""
    domainName: ""
  domain: ""
  subDomains:
    portal: portal
    keycloak: id
  ingressClass: ""
  certManagerIssuer: ""
  postgresql:
    connection:
      host: ""
      port: ""
  objectStorage:
    bucket: "nubus"
    connection:
      host: ""
      port: ""
      protocol: ""
      endpoint: ""
  memcached:
    connection:
      host: ""
    auth:
      username: ""
  keycloak:
    realm: "nubus"

  configMapUcrDefaults: "{{ .Release.Name }}-stack-data-ums-ucr"
  configMapUcr: "{{ .Release.Name }}-stack-data-swp-ucr"
  configMapUcrForced: null

  # -- Extensions to load. Add entries to load additional extensions into Nubus.
  # Interim this value is pre-configured with the typical extensions loaded in
  # the openDesk integration of Nubus to allow for a smooth transition. On the
  # long run this value will become an empty list by default.
  extensions:
    - name: "ox"
      image:
        registry: "artifacts.software-univention.de"
        repository: "nubus/images/ox-extension"
        imagePullPolicy: "IfNotPresent"
        tag: "0.10.0"

  # -- Allows to configure the system extensions to load. This is intended for
  # internal usage, prefer to use `global.extensions` for user configured
  # extensions.
  systemExtensions:
    - name: "portal"
      image:
        registry: "artifacts.software-univention.de"
        repository: "nubus/images/portal-extension"
        imagePullPolicy: "IfNotPresent"
        tag: "0.28.0"


  # Credentials that are primarily or exclusively used by the umbrella chart can be overridden in some cases. This is the place to do it.
  credentialOverride:
    ldapServer:
      adminPassword: ""
    defaultUsers:
      defaultAdminPassword: ""
      defaultUserPassword: ""

# -- Load data to override ucr variables.
# example:
# ucrForcedValues: |
#   portal/auth-mode: ucs
ucrForcedValues: {}

# -- Additional custom annotations to add to all objects deployed directly by the umbrella chart.
additionalAnnotations: {}

# -- Additional custom labels to add to all objects deployed directly by the umbrella chart.
additionalLabels: {}

nubusDevelopment:
  resources: &nubusDevelopmentResources
    limits:
      cpu: 288
      memory: "1Gi"
    requests:
      cpu: "10m"
      memory: "16Mi"
  terminationGracePeriodSeconds: &nubusTerminationGracePeriodSeconds 5

postgresql:
  enabled: true
  resources: *nubusDevelopmentResources
  auth:
    existingSecret: "{{ .Release.Name }}-postgresql-credentials"
    username: "nubus"
    secretKeys:
      adminPasswordKey: "admin_password"
      userPasswordKey: "user_password"
      replicationPasswordKey: "replication_password"
  tls:
    enabled: false
    existingSecret: "{{ .Release.Name }}-postgresql-tls"
    certFilename: "tls.crt"
    certKeyFilename: "tls.key"
    certCaFilename: "ca.crt"
  provisioning:
    enabled: true
    ttlSecondsAfterFinished: 30
    image:
      registry: "docker.io"
      repository: "bitnami/postgresql"
      tag: "15.4.0-debian-11-r45"
    containerSecurityContext:
      enabled: true
      seLinuxOptions: {}
      runAsUser: 1001
      runAsGroup: 1001
      runAsNonRoot: true
      privileged: false
      readOnlyRootFilesystem: true
      allowPrivilegeEscalation: false
      capabilities:
        drop: ["ALL"]
      seccompProfile:
        type: "RuntimeDefault"
  primary:
    resources: *nubusDevelopmentResources
    terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds

minio:
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  enabled: true
  resources: *nubusDevelopmentResources
  networkPolicy:
    enabled: false
    resources: *nubusDevelopmentResources
  auth:
    rootUser: admin
    existingSecret: "{{ .Release.Name }}-minio-credentials"
  tls:
    enabled: false
    resources: *nubusDevelopmentResources
    existingSecret: "{{ .Release.Name }}-minio-tls"
  defaultBuckets: "nubus"

  provisioning:
    enabled: true
    resources: *nubusDevelopmentResources
    cleanupAfterFinished:
      enabled: true
      resources: *nubusDevelopmentResources
    extraCommands:
      - "mc anonymous set download provisioning/nubus/portal-assets"
    buckets:
      - name: "nubus"
        versioning: false
        withLock: false
    policies:
      - name: "nubus-bucket-policy"
        statements:
          - resources:
              - "arn:aws:s3:::nubus"
            effect: "Allow"
            actions:
              - "s3:*"
          - resources:
              - "arn:aws:s3:::nubus/*"
            effect: "Allow"
            actions:
              - "s3:*"
    usersExistingSecrets:
      - nubus-minio-provisioning

keycloak:
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  enabled: true
  resources: *nubusDevelopmentResources
  postgresql:
    connection:
      host: ""
      port: ""
    auth:
      username: keycloak_user
      database: keycloak
      credentialSecret:
        key: password
nubusGuardian: &nubusGuardian
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  nameOverride: "guardian"
  enabled: true
  ingress:
    host: "{{ .Values.global.subDomains.portal }}.{{ .Values.global.domain }}"
    annotations:
      cert-manager.io/cluster-issuer: "{{ .Values.global.certManagerIssuer }}"
  resources: *nubusDevelopmentResources
  postgresql:
    bundled: false
    connection:
      host: ""
      port: ""
    auth:
      database: guardian
      username: guardian
      credentialSecret:
        key: password
  provisioning:
    enabled: true
    config:
      keycloak:
        admin: "kcadmin"
        credentialSecret:
          key: adminPassword
      managementApi:
        credentialSecret:
          key: managementApiClientSecret
nubusLdapNotifier: &nubusLdapNotifier
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  nameOverride: "ldap-notifier"
  enabled: true
  resources: *nubusDevelopmentResources
nubusLdapServer: &nubusLdapServer
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  nameOverride: "ldap-server"
  enabled: true
  highAvailabilityMode: true
  resourcesPrimary: *nubusDevelopmentResources
  resourcesSecondary: *nubusDevelopmentResources
  resourcesProxy: *nubusDevelopmentResources
  extraVolumes:
    - name: "opendesk-schemas"
      configMap:
        name: "{{ .Release.Name }}-stack-data-swp-schemas"
  extraVolumeMounts:
    - name: "opendesk-schemas"
      mountPath: "/var/lib/univention-ldap-local/local-schema/opendeskFileshare.schema"
      subPath: "opendeskFileshare.schema"
    - name: "opendesk-schemas"
      mountPath: "/var/lib/univention-ldap-local/local-schema/opendeskKnowledgemanagement.schema"
      subPath: "opendeskKnowledgemanagement.schema"
    - name: "opendesk-schemas"
      mountPath: "/var/lib/univention-ldap-local/local-schema/opendeskLearnmanagement.schema"
      subPath: "opendeskLearnmanagement.schema"
    - name: "opendesk-schemas"
      mountPath: "/var/lib/univention-ldap-local/local-schema/opendeskLivecollaboration.schema"
      subPath: "opendeskLivecollaboration.schema"
    - name: "opendesk-schemas"
      mountPath: "/var/lib/univention-ldap-local/local-schema/opendeskProjectmanagement.schema"
      subPath: "opendeskProjectmanagement.schema"
nubusNotificationsApi: &nubusNotificationsApi
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  nameOverride: "notifications-api"
  enabled: true
  resources: *nubusDevelopmentResources
  ingress:
    host: "{{ .Values.global.subDomains.portal }}.{{ .Values.global.domain }}"
    annotations:
      cert-manager.io/cluster-issuer: "{{ .Values.global.certManagerIssuer }}"
  postgresql:
    bundled: false
    connection:
      host: ""
      port: ""
    auth:
      username: notificationsapi_user
      database: notificationsapi
      credentialSecret:
        key: password
nubusPortalFrontend: &nubusPortalFrontend
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  nameOverride: "portal-frontend"
  enabled: true
  resources: *nubusDevelopmentResources
  ingress:
    host: "{{ .Values.global.subDomains.portal }}.{{ .Values.global.domain }}"
    annotations:
      cert-manager.io/cluster-issuer: "{{ .Values.global.certManagerIssuer }}"
nubusPortalListener: &nubusPortalListener
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  nameOverride: "portal-listener"
  enabled: true
  resources: *nubusDevelopmentResources
  # Currently gets its configuration from UCR.
  # minio:
  #   connection:
  #     host: ""
  #     port: ""
  #     accessKey:
  #       secretKeyRef:
  #         key: accessKey
  #     secretKey:
  #       secretKeyRef:
  #         key: secretKey
  # Currently gets its configuration from UCR.
  # ldap:
  #   connection:
  #     host: ""
  #     port: ""
  #   auth:
  #     bindDn: cn=admin,dc=example,dc=org
  #     credentialSecret:
  #       key: password
  portalListener:
    ldapHost: "{{ .Release.Name }}-ldap-server-secondary"
    objectStorageBucket: "nubus"
nubusPortalServer: &nubusPortalServer
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  nameOverride: "portal-server"
  enabled: true
  ingress:
    host: "{{ .Values.global.subDomains.portal }}.{{ .Values.global.domain }}"
    annotations:
      cert-manager.io/cluster-issuer: "{{ .Values.global.certManagerIssuer }}"
  resources: *nubusDevelopmentResources
  portalServer:
    objectStorageBucket: "nubus"
  # Currently gets its configuration from UCR.
  # minio:
  #   connection:
  #     host: ""
  #     port: ""
  #     accessKey:
  #       secretKeyRef:
  #         key: accessKey
  #     secretKey:
  #       secretKeyRef:
  #         key: secretKey
nubusProvisioning: &nubusProvisioning
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  nameOverride: "provisioning"
  enabled: true
  resources:
    dispatcher: *nubusDevelopmentResources
    prefill: *nubusDevelopmentResources
    api: *nubusDevelopmentResources
  nats:
    global:
      imageRegistry: "docker.io"
    resources: *nubusDevelopmentResources
    reloader:
      resources: *nubusDevelopmentResources
    natsBox:
      resources: *nubusDevelopmentResources
  api:
    nats:
      connection:
        host: ""
        port: ""
        username: events_and_consumer_api
        password:
          secretKeyRef:
            key: password
  dispatcher:
    nats:
      connection:
        host: ""
        port: ""
        username: dispatcher
        password:
          secretKeyRef:
            key: password
  prefill:
    nats:
      connection:
        host: ""
        port: ""
        username: prefill
        password:
          secretKeyRef:
            key: password
nubusUdmListener: &nubusUdmListener
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  nameOverride: "provisioning-listener"
  enabled: true
  resources: *nubusDevelopmentResources
  ldap:
    connection:
      host: ""
      port: ""
    auth:
      bindDn: cn=admin,dc=example,dc=org
      credentialSecret:
        key: password
  config:
    ldapHost: "{{ .Release.Name }}-ldap-server-secondary"
nubusStackDataSwp: &nubusStackDataSwp
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  nameOverride: "stack-data-swp"
  enabled: true
  resources: *nubusDevelopmentResources
  stackDataSwp:
    loadDevData: true
  stackDataContext:
    ldapSystemUsers:
      - username: "readonly"
        password: '{{ include "nubusTemplates.credentials.ldap.users.readonly.password" . }}'
  # Currently gets its configuration from UCR.
  # ldap:
  #   connection:
  #     host: ""
  #     port: ""
  #   auth:
  #     bindDn: cn=admin,dc=example,dc=org
  #     credentialSecret:
  #       key: password
  #       name: stack-data-swp-ldap-credentials
nubusSelfServiceListener: &nubusSelfServiceListener
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  nameOverride: "selfservice-listener"
  enabled: true
  resources: *nubusDevelopmentResources
  umc:
    auth:
      username: "Administrator"
  provisioningApi:
    auth:
      username: "selfservice"
nubusUdmRestApi: &nubusUdmRestApi
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  nameOverride: "udm-rest-api"
  enabled: true
  ingress:
    host: "{{ .Values.global.subDomains.portal }}.{{ .Values.global.domain }}"
    annotations:
      cert-manager.io/cluster-issuer: "{{ .Values.global.certManagerIssuer }}"
  resources: *nubusDevelopmentResources
  ldap:
    connection:
      host: ""
      port: ""
    auth:
      bindDn: cn=admin,dc=example,dc=org
      credentialSecret:
        key: password
  extraVolumes:
    - name: "attribute-to-group-mapper-hook"
      configMap:
        name: "{{ .Release.Name }}-stack-data-swp-attribute-to-group-mapper-hook"
  extraVolumeMounts:
    - name: "attribute-to-group-mapper-hook"
      mountPath: "/usr/lib/python3/dist-packages/univention/admin/hooks.d/AttributeToGroupMapper.py"
      subPath: "AttributeToGroupMapper.py"
    - name: "attribute-to-group-mapper-hook"
      mountPath: "/usr/share/attribute-to-group-mapper/flag_to_group_mapping.json"
      subPath: "flag_to_group_mapping.json"
nubusUmcGateway: &nubusUmcGateway
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  nameOverride: "umc-gateway"
  enabled: true
  ingress:
    host: "{{ .Values.global.subDomains.portal }}.{{ .Values.global.domain }}"
    annotations:
      cert-manager.io/cluster-issuer: "{{ .Values.global.certManagerIssuer }}"
  resources: *nubusDevelopmentResources
nubusUmcServer: &nubusUmcServer
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  nameOverride: "umc-server"
  enabled: true
  ingress:
    host: "{{ .Values.global.subDomains.portal }}.{{ .Values.global.domain }}"
    annotations:
      cert-manager.io/cluster-issuer: "{{ .Values.global.certManagerIssuer }}"
  resources: *nubusDevelopmentResources
  postgresql:
    connection:
      host: ""
      port: ""
    auth:
      username: selfservice
      database: selfservice
      credentialSecret:
        key: password
  global:
    imageRegistry: "docker.io"
  image:
    registry: "artifacts.software-univention.de"
  memcached:
    nameOverride: "umc-server-memcached"
    containerSecurityContext:
      readOnlyRootFilesystem: false
    auth:
      username: selfservice
      existingPasswordSecret: '{{ printf "%s-umc-server-memcached-credentials" .Release.Name }}'
      credentialSecret:
        key: "memcached-password"
        name: ""
    connection:
      host: ""
      port: ""
      username: umcserver
  umcServer:
    certPemFile: "/var/secrets/ssl/tls.crt"
    privateKeyFile: "/var/secrets/ssl/tls.key"
  extraVolumes:
    - name: "certificates"
      secret:
        secretName: "{{ .Release.Name }}-saml-tls"
    - name: "entrypoint-swp-patches"
      configMap:
        name: "{{ .Release.Name }}-stack-data-swp-umc-server-entrypoint"
        defaultMode: 0555
    - name: "attribute-to-group-mapper-hook"
      configMap:
        name: "{{ .Release.Name }}-stack-data-swp-attribute-to-group-mapper-hook"
    - name: "announcements-customization"
      configMap:
        name: "{{ .Release.Name }}-stack-data-swp-umc-server-announcements"
        defaultMode: 0444
  extraVolumeMounts:
    - name: "certificates"
      mountPath: "/var/secrets/ssl"
    - name: "entrypoint-swp-patches"
      mountPath: "/entrypoint.d/90-customization.sh"
      subPath: "90-customization.sh"
    - name: "attribute-to-group-mapper-hook"
      mountPath: "/usr/lib/python3/dist-packages/univention/admin/hooks.d/AttributeToGroupMapper.py"
      subPath: "AttributeToGroupMapper.py"
    - name: "attribute-to-group-mapper-hook"
      mountPath: "/usr/share/attribute-to-group-mapper/flag_to_group_mapping.json"
      subPath: "flag_to_group_mapping.json"
    - name: "announcements-customization"
      mountPath: "/usr/share/univention-management-console/modules/udm-portals-announcement.xml"
      subPath: "udm-portals-announcement.xml"
nubusKeycloakBootstrap: &nubusKeycloakBootstrap
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  nameOverride: "keycloak-bootstrap"
  enabled: true
  resources: *nubusDevelopmentResources
nubusKeycloakExtensions: &nubusKeycloakExtensions
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  nameOverride: "keycloak-extensions"
  enabled: true
  resources: *nubusDevelopmentResources
  smtp:
    connection:
      host: ""
    auth:
      username: "keycloak-extensions"
      credentialSecret:
        key: password
  keycloak:
    connection:
      host: ""
    auth:
      username: "kcadmin"
      credentialSecret:
        key: password
  postgresql:
    connection:
      host: ""
      port: ""
    auth:
      database: keycloak_extensions
      username: keycloak_extensions
      credentialSecret:
        key: password

nubusStackDataUms:
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  nameOverride: "stack-data-ums"
  enabled: true
  resources: *nubusDevelopmentResources
  nubusNotificationsApi: *nubusNotificationsApi
  nubusUmcServer: *nubusUmcServer
  nubusKeycloakExtensions: *nubusKeycloakExtensions
  nubusKeycloakBootstrap: *nubusKeycloakBootstrap
  nubusPortalListener: *nubusPortalListener
  nubusPortalServer: *nubusPortalServer
  nubusProvisioning: *nubusProvisioning
  nubusUdmListener: *nubusUdmListener
  nubusStackDataSwp: *nubusStackDataSwp
  nubusSelfServiceListener: *nubusSelfServiceListener
  nubusUdmRestApi: *nubusUdmRestApi
  stackDataContext:
    ldapMasterHost: '{{ include "nubusTemplates.connections.ldap.primary.host" . }}'
    ldapHost: '{{ include "nubusTemplates.connections.ldap.secondary.host" . }}'
    installUmcPolicies: true

# Allows for creation of additional secrets, for example containing credentials for third party services.
extraSecrets: []
