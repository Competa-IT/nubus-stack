# SPDX-License-Identifier: AGPL-3.0-only
# SPDX-FileCopyrightText: 2024 Univention GmbH
---

# This file currently contains the set of required values to make a local
# deployment into an evaluation cluster possible. It assumes that the ingress
# controller "ingress-nginx" is in use.
#
# Long term this file shall be reduced again to the minimal set of required
# values so that "helm lint" can be successfully executed.

# Current Requirements
# ====================
#
# - The domain "*.local-cluster.test" has to resolve to the cluster's IP
#   address. On a local dev cluster this could be "127.0.0.1".

global:
  configMapUcrDefaults: "ums-stack-data-ums-ucr"
  configMapUcr: "ums-stack-data-swp-ucr"
  configMapUcrForced: "ums-ucr-overrides"

ums:
  # TODO: Decide about the right home for this. We have a duplication in our
  # development environment. We should most likely have a utility chart or
  # extension to an existing one to make it easy to provide UCR values which
  # override the defaults.
  ucrForcedValues: |-
    directory/manager/rest/ldap-connection/user-read/start-tls: 0
    directory/manager/rest/show-tracebacks: true
    portal/auth-mode: ucs
    umc/http/show_tracebacks: true
    password/quality/length/min: 8
    password/quality/required/chars:
    password/quality/forbidden/chars:
    password/quality/credit/digits: 0
    password/quality/credit/upper: 0
    password/quality/credit/other: 0
    password/quality/credit/lower: 0
    password/quality/mspolicy: false

guardian-authorization-api:
  guardianAuthorizationApi:
    guardianAuthzLoggingStructured: false
    oauthAdapterWellKnownUrl: "http://ums-keycloak:8080/realms/opendesk/.well-known/openid-configuration"
    opaAdapterUrl: "http://ums-open-policy-agent/"
    udmDataAdapterUrl: "http://ums-udm-rest-api/udm/"
    udmDataAdapterUsername: "cn=admin"
    udmDataAdapterPassword: "password"
  ingress:
    host: "portal.local-cluster.test"

guardian-management-api:
  guardianManagementApi:
    guardianManagementLoggingStructured: false
    guardianManagementAdapterAuthorizationApiUrl: "http://ums-guardian-authorization-api/guardian/authorization"
    guardianManagementBaseUrl: "http://localhost:8000"
    oauthAdapterM2mSecret: "password"
    oauthAdapterWellKnownUrl: "http://ums-keycloak:8080/realms/opendesk/.well-known/openid-configuration"
  ingress:
    host: "portal.local-cluster.test"

guardian-management-ui:
  guardianManagementUi:
    viteApiDataAdapterUri: "http://localhost:8000/guardian/management"
    # TODO: This needs a Keycloak specific value
    viteKeycloakAuthenticationAdapterSsoUri: "http://localhost:8000"
    viteKeycloakAuthenticationAdapterRealm: "opendesk"
  ingress:
    host: "portal.local-cluster.test"

open-policy-agent:
  openPolicyAgent:
    opaGuardianManagementUrl: "http://ums-guardian-management-api:8000/guardian/management"
  ingress:
    host: "portal.local-cluster.test"

ldap-notifier:
  volumes:
    claims:
      shared-data: "shared-data-ums-ldap-server-0"
      shared-run: "shared-run-ums-ldap-server-0"

ldap-server:
  ldapServer:
    config:
      domainName: "univention-organization.intranet"
      ldapBaseDn: "dc=univention-organization,dc=intranet"
      samlMetadataUrl: "http://ums-keycloak:8080/realms/opendesk/protocol/saml/descriptor"
      samlMetadataUrlInternal: "http://ums-keycloak:8080/realms/opendesk/protocol/saml/descriptor"
      samlServiceProviders: "http://ums-keycloak:8000/univention/saml/metadata,http://ums-keycloak:8000/auth/realms/ucs"
    credentialSecret:
      name: ldap-credentials
  extraVolumes:
    - name: "opendesk-schemas"
      configMap:
        name: "ums-stack-data-swp-schemas"

  extraVolumeMounts:
    - name: "opendesk-schemas"
      mountPath: "/var/lib/univention-ldap-local/local-schema/opendeskFileshare.schema"
      subPath: "opendeskFileshare.schema"
    - name: "opendesk-schemas"
      mountPath: "/var/lib/univention-ldap-local/local-schema/opendeskKnowledgemanagement.schema"
      subPath: "opendeskKnowledgemanagement.schema"
    - name: "opendesk-schemas"
      mountPath: "/var/lib/univention-ldap-local/local-schema/opendeskLearnmanagement.schema"
      subPath: "opendeskLearnmanagement.schema"
    - name: "opendesk-schemas"
      mountPath: "/var/lib/univention-ldap-local/local-schema/opendeskLivecollaboration.schema"
      subPath: "opendeskLivecollaboration.schema"
    - name: "opendesk-schemas"
      mountPath: "/var/lib/univention-ldap-local/local-schema/opendeskProjectmanagement.schema"
      subPath: "opendeskProjectmanagement.schema"

notifications-api:
  ingress:
    host: "portal.local-cluster.test"
    tls:
      enabled: false
  postgresql:
    nameOverride: "notifications-api-postgresql"
    auth:
      existingSecret: "ums-notifications-api-postgresql-credentials"
    image:
      # TODO: Workaround to allow avoid failing "helm update". Without setting
      # the image back to "15.*" Helm does during install select version "16.*"
      # and during update "15.*".
      tag: "15.3.0-debian-11-r77"
  extraSecrets:
    - name: "ums-notifications-api-postgresql-credentials"
      stringData:
        postgres-password: "password"
        password: "password"

portal-frontend:
  extraIngresses:
    redirects:
      enabled: true
    workaround:
      enabled: true
    # See "extraVolumeMounts" below
    custom-favicon:
      enabled: true
      annotations:
        nginx.org/mergeable-ingress-type: "minion"
      paths:
        - pathType: Exact
          path: /favicon.ico
      tls: {}
    # See "extraVolumeMounts" below
    custom-branding:
      enabled: true
      annotations:
        nginx.ingress.kubernetes.io/configuration-snippet: |
          rewrite ^/univention/portal(/.*)$ $1 break;
        nginx.org/location-snippets: |
          rewrite ^/univention/portal(/.*)$ $1 break;
        nginx.org/mergeable-ingress-type: "minion"
      paths:
        # This relies on the correct implementation of the matching for paths of
        # type "Prefix" since "/univention/portal/icons/entries/" is owned by
        # store-dav.
        # See: https://kubernetes.io/docs/concepts/services-networking/ingress/#multiple-matches
        - pathType: Prefix
          path: /univention/portal/icons/
        - pathType: Prefix
          path: /univention/portal/custom/
      tls: {}
  extraVolumes:
    - name: "opendesk-branding"
      configMap:
        name: "ums-stack-data-swp-branding"
  extraVolumeMounts:
    - name: "opendesk-branding"
      mountPath: "/var/www/html/favicon.ico"
      subPath: "favicon.ico"
    - name: "opendesk-branding"
      mountPath: "/var/www/html/css/custom.css"
      subPath: "custom.css"
    - name: "opendesk-branding"
      mountPath: "/var/www/html/icons/logo.svg"
      subPath: "logo.svg"
    - name: "opendesk-branding"
      mountPath: "/var/www/html/icons/logo_small_border.svg"
      subPath: "logo_small_border.svg"
    - name: "opendesk-branding"
      mountPath: "/var/www/html/custom/portal_background_image.png"
      subPath: "portal_background_image.png"
    - name: "opendesk-branding"
      mountPath: "/var/www/html/custom/portal_background_image.svg"
      subPath: "portal_background_image.svg"
  ingress:
    host: "portal.local-cluster.test"
    tls:
      enabled: false

portal-listener:
  portalListener:
    assetsRootPath: "portal-assets"
    adminGroup: "cn=Domain Admins,cn=groups,dc=univention-organization,dc=intranet"
    ucsInternalPath: "portal-data"
    udmApiUrl: "http://ums-udm-rest-api/udm/"
    udmApiUsername: "cn=admin"
    umcGetUrl: "http://ums-umc-server/get"
    umcSessionUrl: "http://ums-umc-server/get/session-info"
    ldapHost: "ums-ldap-server"
    notifierServer: "ums-ldap-notifier"
    ldapBaseDn: "dc=univention-organization,dc=intranet"
    portalDefaultDn: "cn=domain,cn=portal,cn=portals,cn=univention,dc=univention-organization,dc=intranet"
    ldapHostDn: "cn=admin,dc=univention-organization,dc=intranet"
    ldapSecret: "password"
    machineSecret: "password"
    tlsMode: "off"
    objectStorageEndpoint: "http://ums-minio:9000"
    objectStorageBucket: "ums"
    objectStorageAccessKeyId: "ums_user"
    objectStorageSecretAccessKey: "univention"

portal-server:
  portalServer:
    adminGroup: "cn=Domain Admins,cn=groups,dc=univention-organization,dc=intranet"
    ucsInternalPath: "portal-data"
    umcGetUrl: "http://ums-umc-server/get"
    umcSessionUrl: "http://ums-umc-server/get/session-info"
    objectStorageEndpoint: "http://ums-minio:9000"
    objectStorageBucket: "ums"
    objectStorageAccessKeyId: "ums_user"
    objectStorageSecretAccessKey: "univention"
  ingress:
    host: "portal.local-cluster.test"
    tls:
      enabled: false

provisioning:
  # TODO: Workaround until MR is merged
  # See https://git.knut.univention.de/univention/customers/dataport/upx/provisioning/-/merge_requests/117
  global:
    imageRegistry: "gitregistry.knut.univention.de"

  events-and-consumer-api:
    nameOverride: "provisioning-events-and-consumer-api"
    ingress:
      host: "portal.local-cluster.test"
      tls:
        enabled: false
    config:
      logLevel: "DEBUG"
      rootPath: "/univention/provisioning-api"
      natsHost: "ums-provisioning-nats"
      natsPort: 4222
    # TODO: Usage of "common.names.dependency.fullname" expects this
    nats:
      nameOverride: "provisioning-nats"

  dispatcher:
    nameOverride: "provisioning-dispatcher"
    config:
      LOG_LEVEL: "DEBUG"
      UDM_HOST: "udm-rest-api"
      natsHost: "ums-provisioning-nats"
      natsPort: 4222
    # TODO: Usage of "common.names.dependency.fullname" expects this
    nats:
      nameOverride: "provisioning-nats"
    # TODO: The probes are not working
    probes:
      liveness:
        enabled: false
      readiness:
        enabled: false

  nats:
    nameOverride: "provisioning-nats"

  udmTransformer:
    config:
      LOG_LEVEL: "DEBUG"
      UDM_HOST: "udm-rest-api"
      UDM_PORT: 80
      LDAP_TLS_MODE: "off"
    api:
      auth:
        credentialSecretName: "ums-provisioning-udm-transformer-api-credentials"
    nats:
      auth:
        credentialSecretName: "ums-provisioning-udm-transformer-nats-credentials"
    ldap:
      baseDn: "dc=univention-organization,dc=intranet"
      auth:
        bindDn: "cn=admin,dc=univention-organization,dc=intranet"
        credentialSecretName: "provisioning-udm-transformer-ldap-credentials"
      connection:
        host: "ldap-server"
        port: "389"

udm-listener:
  enabled: true
  nameOverride: "provisioning-listener"
  config:
    debugLevel: "4"
    ldapBaseDn: "dc=univention-organization,dc=intranet"
    ldapHost: "ums-ldap-server"
    ldapHostDn: "cn=admin,dc=univention-organization,dc=intranet"
    ldapPassword: "password"
    ldapPort: "389"
    notifierServer: "ums-ldap-notifier"
    tlsMode: "off"
    natsHost: "ums-provisioning-nats"

stack-data-ums:
  stackDataUms:
    udmApiPassword: "password"
    udmApiUrl: "http://ums-udm-rest-api/udm/"
    loadDevData: true
  stackDataContext:
    initialPasswordAdministrator: "univention"
    initialPasswordSysIdpUser: "univention"
    ldapHost: "ums-ldap-server"
    idpSamlMetadataUrl: "http://ums-keycloak:8080/realms/opendesk/protocol/saml/descriptor"
    idpSamlMetadataUrlInternal: null
    idpFqdn: "id.local-cluster.test"
    umcSamlSpFqdn: "portal.local-cluster.test"
    umcSamlSchemes: "https"
    umcMemcachedHostname: "ums-umc-server-memcached"
    umcPostgresqlHostname: "ums-umc-server-postgresql"
    ldapSamlSpUrls: "https://portal.local-cluster.test/univention/saml/metadata"

stack-data-swp:
  stackDataSwp:
    udmApiPassword: "password"
    udmApiUrl: "http://ums-udm-rest-api/udm/"
    loadDevData: true
  stackDataContext:
    userPassword: "univention"
    adminPassword: "univention"
    ldapSearchUsers:
      - username: "ldapsearch_keycloak"
        password: "univention"
      # TODO: We need typically more entries, compare opendesk setup

selfservice-listener:
  selfserviceListener:
    ldapBaseDn: "dc=univention-organization,dc=intranet"
    ldapHost: "ums-ldap-server"
    ldapHostDn: "cn=admin,dc=univention-organization,dc=intranet"
    ldapPassword: "password"
    machineSecret: "password"
    notifierServer: "ums-ldap-notifier"
    debugLevel: "4"
    tlsMode: "off"
    umcServerUrl: "http://ums-umc-server"
    umcAdminUser: "default.admin"
    umcAdminPassword: "univention"

udm-rest-api:
  udmRestApi:
    ldap:
      uri: "ldap://ums-ldap-server:389"
      baseDn: "dc=univention-organization,dc=intranet"
    secretRef: udm-rest-api-credentials
    # TODO: Pending correction
    # See https://git.knut.univention.de/univention/customers/dataport/upx/container-udm-rest/-/merge_requests/100
    image:
      registry: "gitregistry.knut.univention.de"
      tag: "latest"

  extraSecrets:
    - name: udm-rest-api-credentials
      stringData:
        ldap.secret: "password"
        machine.secret: "password"

  extraVolumes:
    - name: "attribute-to-group-mapper-hook"
      configMap:
        name: "ums-stack-data-swp-attribute-to-group-mapper-hook"

  extraVolumeMounts:
    - name: "attribute-to-group-mapper-hook"
      mountPath: "/usr/lib/python3/dist-packages/univention/admin/hooks.d/AttributeToGroupMapper.py"
      subPath: "AttributeToGroupMapper.py"
    - name: "attribute-to-group-mapper-hook"
      mountPath: "/usr/share/attribute-to-group-mapper/flag_to_group_mapping.json"
      subPath: "flag_to_group_mapping.json"

  ingress:
    host: "portal.local-cluster.test"
    tls:
      enabled: false

umc-gateway:
  umcGateway:
    umcHtmlTitle: "openDesk - Admin"
  extraVolumes:
    - name: "entrypoint-swp-patches"
      configMap:
        name: "ums-stack-data-swp-umc-gateway-entrypoint"
        defaultMode: 0555
    - name: "announcements-customization"
      configMap:
        name: "ums-stack-data-swp-umc-server-announcements"
        defaultMode: 0444
  extraVolumeMounts:
    - name: "entrypoint-swp-patches"
      mountPath: "/entrypoint.d/90-swp.sh"
      subPath: "90-swp.sh"
    - name: "announcements-customization"
      mountPath:
        "/usr/share/univention-management-console-frontend/js/dijit/themes\
        /umc/icons/16x16/udm-portals-announcement.png"
      subPath: "udm-portals-announcement.png"
  ingress:
    host: "portal.local-cluster.test"
    tls:
      enabled: false

umc-server:
  umcServer:
    ldapSecret: "password"
    machineSecret: "password"
    smtpSecret: ""
    caCert: ""
  extraVolumes:
    - name: "entrypoint-swp-patches"
      configMap:
        name: "ums-stack-data-swp-umc-server-entrypoint"
        defaultMode: 0555
    - name: "self-service-emails"
      configMap:
        name: "ums-stack-data-swp-self-service-emails"
        defaultMode: 0444
    - name: "attribute-to-group-mapper-hook"
      configMap:
        name: "ums-stack-data-swp-attribute-to-group-mapper-hook"
    - name: "announcements-customization"
      configMap:
        name: "ums-stack-data-swp-umc-server-announcements"
        defaultMode: 0444
  extraVolumeMounts:
    - name: "entrypoint-swp-patches"
      mountPath: "/entrypoint.d/90-customization.sh"
      subPath: "90-customization.sh"
    - name: "self-service-emails"
      mountPath: "/usr/share/univention-self-service/email_bodies"
    - name: "attribute-to-group-mapper-hook"
      mountPath: "/usr/lib/python3/dist-packages/univention/admin/hooks.d/AttributeToGroupMapper.py"
      subPath: "AttributeToGroupMapper.py"
    - name: "attribute-to-group-mapper-hook"
      mountPath: "/usr/share/attribute-to-group-mapper/flag_to_group_mapping.json"
      subPath: "flag_to_group_mapping.json"
    - name: "announcements-customization"
      mountPath: "/usr/share/univention-management-console/modules/udm-portals-announcement.xml"
      subPath: "udm-portals-announcement.xml"
  ingress:
    host: "portal.local-cluster.test"
    tls:
      enabled: false
  postgresql:
    nameOverride: "umc-server-postgresql"
    auth:
      password: "password"
      postgresPassword: "password"
  memcached:
    nameOverride: "umc-server-memcached"
    auth:
      password: "password"


keycloak:
  global:
    domain: "local-cluster.test"
    hosts:
      keycloak: "id"
  config:
    admin:
      password: "password"
    database:
      host: "ums-keycloak-postgresql"
      port: 5432
      username: "keycloak"
      database: "keycloak"
      password: "password"
  resources:
    limits:
      # TODO: Workaround, did not find a yet a working way to "unset" the limit
      memory: "99Gi"
  theme:
    univentionTheme: "https://portal.local-cluster.test/univention/theme.css"
    univentionCustomTheme: "https://portal.local-cluster.test/univention/portal/css/custom.css"
    favIcon: "https://portal.local-cluster.test/favicon.ico"

keycloak-bootstrap:
  # TODO: Find easier way to skip this in the call to "helm upgrade"
  enabled: true
  global:
    domain: "local-cluster.test"
    hosts:
      keycloak: "id"
  # TODO: The helm chart does not use latest but "1.0.0" instead as default
  # image tag. The old image is lacking the "intraCluster" feature.
  image:
    tag: "1.0.8"
  keycloak:
    auth:
      username: "kcadmin"
      password: "password"
      realm: "opendesk"
    connection:
      host: "ums-keycloak:8080"
      baseUrl: "http://ums-keycloak:8080"
  ldap:
    connection:
      host: "ums-ldap-server"
      port: 389
    baseDn: "dc=univention-organization,dc=intranet"
    auth:
      bindDn: "uid=ldapsearch_keycloak,cn=users,dc=univention-organization,dc=intranet"
      password: "univention"

keycloak-extensions:
  keycloak:
    connection:
      host: "ums-keycloak:8080"
    auth:
      username: "kcadmin"
      password: "password"
      realm: "master"
  postgresql:
    enabled: false
    connection:
      host: "ums-keycloak-postgresql"
      port: 5432
    auth:
      database: "keycloak"
      username: "keycloak"
      password: "password"
  handler:
    nameOverride: "keycloak-extensions-handler"
    appConfig: {}
  proxy:
    nameOverride: "keycloak-extensions-proxy"
    ingress:
      annotations:
        nginx.org/proxy-buffer-size: "8k"
        nginx.ingress.kubernetes.io/proxy-buffer-size: "8k"
      paths:
        # TODO: temporary
        - pathType: "Prefix"
          path: "/admin"
        - pathType: "Prefix"
          path: "/realms"
        - pathType: "Prefix"
          path: "/resources"
        - pathType: "Prefix"
          path: "/fingerprintjs"
      enabled: true
      ingressClassName: "nginx"
      host: "id.local-cluster.test"
      tls:
        enabled: false
        secretName: ""

keycloak-postgresql:
  auth:
    username: "keycloak"
    database: "keycloak"
    password: "password"
    postgresPassword: "password"

stack-gateway:
  enabled: false

tags:
  pre-release: true

minio:
  enabled: true
  auth:
    rootPassword: "univention"
  defaultBuckets: "ums"
  provisioning:
    enabled: true
    cleanupAfterFinished:
      enabled: true
    extraCommands:
      - mc anonymous set download provisioning/ums/portal-assets
    buckets:
      - name: "ums"
        versioning: false
        withLock: false
    policies:
      - name: "ums-bucket-policy"
        statements:
          - resources:
              - "arn:aws:s3:::ums"
            effect: "Allow"
            actions:
              - "s3:*"
          - resources:
              - "arn:aws:s3:::ums/*"
            effect: "Allow"
            actions:
              - "s3:*"
    users:
      - username: "ums_user"
        password: "univention"
        disabled: false
        policies:
          - "ums-bucket-policy"
        setPolicies: true

stack-gateway:
  enabled: true
  fullnameOverride: "ums-stack-gateway"

  ingress:
    annotations:
      # Ensure that the ingress controller can handle responses with plenty of
      # headers. This is a requirement from the UDM Rest API.
      nginx.org/proxy-buffer-size: "64k"
      nginx.org/proxy-buffers: "4 128k"
      nginx.ingress.kubernetes.io/proxy-buffer-size: "64k"
    enabled: true
    extraTls:
      - hosts:
          - "portal.local-cluster.test"
        secretName: "portal-tls"
    hostname: "portal.local-cluster.test"
    ingressClassName: "nginx"
    tls: false

  podSecurityContext:
    enabled: true
    fsGroup: 1001

  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    runAsNonRoot: true
    privileged: false
    readOnlyRootFilesystem: false
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - "ALL"
    seccompProfile:
      type: "RuntimeDefault"

  service:
    type: "ClusterIP"

  serviceAccount:
    create: true

  # The content of the "serverBlock" does resemble the Ingress configuration of
  # the UMS components. The "location" entries do intentionally reflect precisely
  # the respective paths which are configured.
  serverBlock: |
    server {
      listen 8080;

      proxy_http_version 1.1;

      proxy_set_header Host $http_host;

      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Host $http_x_forwarded_host;
      proxy_set_header X-Forwarded-Port $http_x_forwarded_port;
      proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;

      ## portal-frontend
      # The frontend does not own "/univention/portal" nor
      # "/univention/selfservice", only these two bits
      location = /univention/portal/ {
        rewrite ^/univention/portal(/.*)$ $1 break;
        proxy_pass http://ums-portal-frontend:80/;
      }
      location = /univention/portal/index.html {
        rewrite ^/univention/portal(/.*)$ $1 break;
        proxy_pass http://ums-portal-frontend:80/;
      }
      location = /univention/selfservice/ {
        rewrite ^/univention/selfservice(/.*)$ $1 break;
        proxy_pass http://ums-portal-frontend:80/;
      }

      # The following prefixes are owned by the frontend
      location /univention/portal/css/ {
        rewrite ^/univention/portal(/.*)$ $1 break;
        proxy_pass http://ums-portal-frontend:80;
      }
      location /univention/portal/fonts/ {
        rewrite ^/univention/portal(/.*)$ $1 break;
        proxy_pass http://ums-portal-frontend:80;
      }
      location /univention/portal/i18n/ {
        rewrite ^/univention/portal(/.*)$ $1 break;
        proxy_pass http://ums-portal-frontend:80;
      }
      location /univention/portal/media/ {
        rewrite ^/univention/portal(/.*)$ $1 break;
        proxy_pass http://ums-portal-frontend:80;
      }
      location /univention/portal/js/ {
        rewrite ^/univention/portal(/.*)$ $1 break;
        proxy_pass http://ums-portal-frontend:80;
      }
      location /univention/portal/oidc/ {
        rewrite ^/univention/portal(/.*)$ $1 break;
        proxy_pass http://ums-portal-frontend:80;
      }
      location /univention/selfservice/css/ {
        rewrite ^/univention/selfservice(/.*)$ $1 break;
        proxy_pass http://ums-portal-frontend:80;
      }
      location /univention/selfservice/fonts/ {
        rewrite ^/univention/selfservice(/.*)$ $1 break;
        proxy_pass http://ums-portal-frontend:80;
      }
      location /univention/selfservice/i18n/ {
        rewrite ^/univention/selfservice(/.*)$ $1 break;
        proxy_pass http://ums-portal-frontend:80;
      }
      location /univention/selfservice/media/ {
        rewrite ^/univention/selfservice(/.*)$ $1 break;
        proxy_pass http://ums-portal-frontend:80;
      }
      location /univention/selfservice/js/ {
        rewrite ^/univention/selfservice(/.*)$ $1 break;
        proxy_pass http://ums-portal-frontend:80;
      }
      location /univention/selfservice/oidc/ {
        rewrite ^/univention/selfservice(/.*)$ $1 break;
        proxy_pass http://ums-portal-frontend:80;
      }


      ## frontend redirects
      location = / {
        absolute_redirect off;
        return 302 /univention/portal/;
      }
      location = /univention {
        absolute_redirect off;
        return 302 /univention/portal/;
      }
      location = /univention/ {
        absolute_redirect off;
        return 302 /univention/portal/;
      }
      location = /univention/portal {
        absolute_redirect off;
        return 302 /univention/portal/;
      }
      location = /univention/selfservice {
        absolute_redirect off;
        return 302 /univention/selfservice/;
      }


      ## portal-server
      location = /univention/portal/portal.json {
        proxy_pass http://ums-portal-server:80;
      }
      location = /univention/selfservice/portal.json {
        proxy_pass http://ums-portal-server:80;
      }
      location = /univention/portal/navigation.json {
        proxy_pass http://ums-portal-server:80;
      }


      ## udm-rest-api
      location /univention/udm/ {
        # The UDM Rest API does return on some endpoints a lot of headers
        proxy_busy_buffers_size 128k;
        proxy_buffers 4 128k;
        proxy_buffer_size 64k;

        rewrite ^/univention(/udm/.*)$ $1 break;
        proxy_pass http://ums-udm-rest-api:80;
      }


      ## umc-gateway
      location = /univention/languages.json {
        proxy_pass http://ums-umc-gateway:80;
      }
      location = /univention/meta.json {
        proxy_pass http://ums-umc-gateway:80;
      }
      location = /univention/theme.css {
        proxy_pass http://ums-umc-gateway:80;
      }
      location /univention/js/ {
        proxy_pass http://ums-umc-gateway:80;
      }
      location /univention/login/ {
        proxy_pass http://ums-umc-gateway:80;
      }
      location /univention/management/ {
        proxy_pass http://ums-umc-gateway:80;
      }
      location /univention/themes/ {
        proxy_pass http://ums-umc-gateway:80;
      }


      ## umc-server
      location = /univention/auth {
        rewrite ^/univention(/.*)$ $1 break;
        proxy_pass http://ums-umc-server:80;
        proxy_set_header X-UMC-HTTPS 'on';
      }
      location /univention/logout {
        rewrite ^/univention(/.*)$ $1 break;
        proxy_pass http://ums-umc-server:80;
      }
      location /univention/saml {
        rewrite ^/univention(/.*)$ $1 break;
        proxy_pass http://ums-umc-server:80;
        proxy_set_header X-UMC-HTTPS 'on';
      }
      location /univention/get {
        rewrite ^/univention(/.*)$ $1 break;
        proxy_pass http://ums-umc-server:80;
      }
      location /univention/set {
        rewrite ^/univention(/.*)$ $1 break;
        proxy_pass http://ums-umc-server:80;
      }
      location /univention/command {
        rewrite ^/univention(/.*)$ $1 break;
        proxy_pass http://ums-umc-server:80;
      }
      location /univention/upload {
        rewrite ^/univention(/.*)$ $1 break;
        proxy_pass http://ums-umc-server:80;
      }


      ## notifications-api
      location /univention/portal/notifications-api/ {
        rewrite ^/univention/portal/notifications-api(/.*)$ $1 break;
        proxy_pass http://ums-notifications-api:80;
      }

      ## openDesk branding
      location = /favicon.ico {
        proxy_pass http://ums-portal-frontend:80/;
      }
      location /univention/portal/custom/ {
        rewrite ^/univention/portal(/.*)$ $1 break;
        proxy_pass http://ums-portal-frontend:80/;
      }
      location /univention/portal/icons/ {
        rewrite ^/univention/portal(/.*)$ $1 break;
        proxy_pass http://ums-portal-frontend:80/;
      }

      ## provisioning-api
      location /univention/provisioning-api/ {
        rewrite ^/univention/provisioning-api(/.*)$ $1 break;
        proxy_pass http://ums-provisioning-api:80;
      }

      ## guardian
      location /univention/guardian/management-ui {
        proxy_pass http://ums-guardian-management-ui:80/univention/guardian/management-ui;
      }
      location /guardian/opa {
        rewrite ^/guardian/opa(/.*)$ $1 break;
        proxy_pass http://ums-open-policy-agent:80/;
      }
      location /guardian/management {
        proxy_pass http://ums-guardian-management-api:80/guardian/management;
      }
      location /guardian/authorization {
        proxy_pass http://ums-guardian-authorization-api:80/guardian/authorization;
      }

      ## object storage (minio)
      location /univention/portal/icons/entries/ {
        rewrite ^/univention/portal(/icons/entries/.*)$ /ums/portal-assets$1 break;
        proxy_pass http://ums-minio:9000;
      }
      location /univention/portal/icons/logos/ {
        rewrite ^/univention/portal(/icons/logos/.*)$ /ums/portal-assets$1 break;
        proxy_pass http://ums-minio:9000;
      }
      location /univention/selfservice/icons/entries/ {
        rewrite ^/univention/selfservice(/icons/entries/.*)$ /ums/portal-assets$1 break;
        proxy_pass http://ums-minio:9000;
      }
      location /univention/selfservice/icons/logos/ {
        rewrite ^/univention/selfservice(/icons/logos/.*)$ /ums/portal-assets$1 break;
        proxy_pass http://ums-minio:9000;
      }

    }
